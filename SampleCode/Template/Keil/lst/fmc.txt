; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\fmc.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\fmc.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M031\Include -I..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\fmc.crf ..\..\..\Library\StdDriver\src\fmc.c]
                          THUMB

                          AREA fastcode, CODE, READONLY, ALIGN=2

                  FMC_WriteMultiple PROC
;;;436    #pragma arm section code="fastcode"
;;;437    int32_t FMC_WriteMultiple(uint32_t u32Addr, uint32_t pu32Buf[], uint32_t u32Len)
000000  b5f0              PUSH     {r4-r7,lr}
;;;438    
;;;439    #elif defined ( __ICCARM__ )
;;;440    int32_t FMC_WriteMultiple(uint32_t u32Addr, uint32_t pu32Buf[], uint32_t u32Len) @ "fastcode"
;;;441    
;;;442    #elif defined ( __GNUC__ )
;;;443    #pragma GCC push_options
;;;444    #pragma GCC optimize ("O0")
;;;445    __attribute__ ((used, long_call, section(".fastcode"))) int32_t FMC_WriteMultiple(uint32_t u32Addr, uint32_t pu32Buf[], uint32_t u32Len)
;;;446    
;;;447    #else
;;;448    int32_t FMC_WriteMultiple(uint32_t u32Addr, uint32_t pu32Buf[], uint32_t u32Len)
;;;449    #endif
;;;450    {
000002  4605              MOV      r5,r0
;;;451    
;;;452        uint32_t i, idx, u32OnProg, retval = 0;
;;;453        int32_t err;
;;;454    
;;;455        if ((u32Addr % 8) != 0)
000004  0740              LSLS     r0,r0,#29
000006  d002              BEQ      |L1.14|
;;;456        {
;;;457            return -1;
000008  2000              MOVS     r0,#0
00000a  43c0              MVNS     r0,r0
;;;458        }
;;;459    
;;;460        idx = 0u;
;;;461        FMC->ISPCMD = FMC_ISPCMD_MULTI_PROG;
;;;462        FMC->ISPADDR = u32Addr;
;;;463        retval += 16;
;;;464        do
;;;465        {
;;;466            err = 0;
;;;467            u32OnProg = 1u;
;;;468            FMC->MPDAT0 = pu32Buf[idx + 0u];
;;;469            FMC->MPDAT1 = pu32Buf[idx + 1u];
;;;470            FMC->MPDAT2 = pu32Buf[idx + 2u];
;;;471            FMC->MPDAT3 = pu32Buf[idx + 3u];
;;;472            FMC->ISPTRG = 0x1u;
;;;473            idx += 4u;
;;;474    
;;;475            for (i = idx; i < (FMC_MULTI_WORD_PROG_LEN / 4u); i += 4u) /* Max data length is 256 bytes (512/4 words)*/
;;;476            {
;;;477                __set_PRIMASK(1u); /* Mask interrupt to avoid status check coherence error*/
;;;478                do
;;;479                {
;;;480                    if ((FMC->MPSTS & FMC_MPSTS_MPBUSY_Msk) == 0u)
;;;481                    {
;;;482                        __set_PRIMASK(0u);
;;;483    
;;;484                        FMC->ISPADDR = FMC->MPADDR & (~0xful);
;;;485                        idx = (FMC->ISPADDR - u32Addr) / 4u;
;;;486                        err = -1;
;;;487                    }
;;;488                }
;;;489                while ((FMC->MPSTS & (3u << FMC_MPSTS_D0_Pos)) && (err == 0));
;;;490    
;;;491                if (err == 0)
;;;492                {
;;;493                    retval += 8;
;;;494    
;;;495                    /* Update new data for D0 */
;;;496                    FMC->MPDAT0 = pu32Buf[i];
;;;497                    FMC->MPDAT1 = pu32Buf[i + 1u];
;;;498                    do
;;;499                    {
;;;500                        if ((FMC->MPSTS & FMC_MPSTS_MPBUSY_Msk) == 0u)
;;;501                        {
;;;502                            __set_PRIMASK(0u);
;;;503                            FMC->ISPADDR = FMC->MPADDR & (~0xful);
;;;504                            idx = (FMC->ISPADDR - u32Addr) / 4u;
;;;505                            err = -1;
;;;506                        }
;;;507                    }
;;;508                    while ((FMC->MPSTS & (3u << FMC_MPSTS_D2_Pos)) && (err == 0));
;;;509    
;;;510                    if (err == 0)
;;;511                    {
;;;512                        retval += 8;
;;;513    
;;;514                        /* Update new data for D2*/
;;;515                        FMC->MPDAT2 = pu32Buf[i + 2u];
;;;516                        FMC->MPDAT3 = pu32Buf[i + 3u];
;;;517                        __set_PRIMASK(0u);
;;;518                    }
;;;519                }
;;;520    
;;;521                if (err < 0)
;;;522                {
;;;523                    break;
;;;524                }
;;;525            }
;;;526            if (err == 0)
;;;527            {
;;;528                u32OnProg = 0u;
;;;529                while (FMC->ISPSTS & FMC_ISPSTS_ISPBUSY_Msk) { }
;;;530            }
;;;531        }
;;;532        while (u32OnProg);
;;;533        return retval;
;;;534    }
00000c  bdf0              POP      {r4-r7,pc}
                  |L1.14|
00000e  2300              MOVS     r3,#0                 ;460
000010  4a40              LDR      r2,|L1.276|
000012  2027              MOVS     r0,#0x27              ;461
000014  60d0              STR      r0,[r2,#0xc]          ;461
000016  6055              STR      r5,[r2,#4]            ;462
000018  2010              MOVS     r0,#0x10              ;463
                  |L1.26|
00001a  2401              MOVS     r4,#1                 ;467
00001c  009f              LSLS     r7,r3,#2              ;468
00001e  4e3d              LDR      r6,|L1.276|
000020  2200              MOVS     r2,#0                 ;466
000022  46a6              MOV      lr,r4                 ;467
000024  59cc              LDR      r4,[r1,r7]            ;468
000026  3680              ADDS     r6,r6,#0x80           ;468
000028  6034              STR      r4,[r6,#0]            ;468
00002a  187c              ADDS     r4,r7,r1              ;469
00002c  6867              LDR      r7,[r4,#4]            ;469
00002e  6077              STR      r7,[r6,#4]            ;469
000030  68a7              LDR      r7,[r4,#8]            ;470
000032  60b7              STR      r7,[r6,#8]            ;470
000034  68e4              LDR      r4,[r4,#0xc]          ;471
000036  60f4              STR      r4,[r6,#0xc]          ;471
000038  4e36              LDR      r6,|L1.276|
00003a  2401              MOVS     r4,#1                 ;472
00003c  6134              STR      r4,[r6,#0x10]         ;472
00003e  1d1b              ADDS     r3,r3,#4              ;472
000040  461c              MOV      r4,r3                 ;475
000042  e049              B        |L1.216|
                  |L1.68|
000044  2601              MOVS     r6,#1                 ;477
000046  f3868810          MSR      PRIMASK,r6            ;477
00004a  4e32              LDR      r6,|L1.276|
00004c  36c0              ADDS     r6,r6,#0xc0           ;480
                  |L1.78|
00004e  6837              LDR      r7,[r6,#0]            ;480
000050  07ff              LSLS     r7,r7,#31             ;480
000052  d10b              BNE      |L1.108|
000054  2200              MOVS     r2,#0                 ;482
000056  f3828810          MSR      PRIMASK,r2            ;482
00005a  6872              LDR      r2,[r6,#4]            ;484
00005c  0913              LSRS     r3,r2,#4              ;484
00005e  4a2d              LDR      r2,|L1.276|
000060  011b              LSLS     r3,r3,#4              ;484
000062  6053              STR      r3,[r2,#4]            ;484
000064  6852              LDR      r2,[r2,#4]            ;485
000066  1b52              SUBS     r2,r2,r5              ;485
000068  0893              LSRS     r3,r2,#2              ;485
00006a  1e7a              SUBS     r2,r7,#1              ;486
                  |L1.108|
00006c  4e29              LDR      r6,|L1.276|
00006e  36c0              ADDS     r6,r6,#0xc0           ;489
000070  6837              LDR      r7,[r6,#0]            ;489
000072  06bf              LSLS     r7,r7,#26             ;489
000074  0fbf              LSRS     r7,r7,#30             ;489
000076  d002              BEQ      |L1.126|
000078  2a00              CMP      r2,#0                 ;489
00007a  d0e8              BEQ      |L1.78|
00007c  e029              B        |L1.210|
                  |L1.126|
00007e  2a00              CMP      r2,#0                 ;491
000080  d127              BNE      |L1.210|
000082  00a6              LSLS     r6,r4,#2              ;496
000084  46b4              MOV      r12,r6                ;496
000086  598f              LDR      r7,[r1,r6]            ;496
000088  4e22              LDR      r6,|L1.276|
00008a  3680              ADDS     r6,r6,#0x80           ;496
00008c  6037              STR      r7,[r6,#0]            ;496
00008e  4666              MOV      r6,r12                ;496
000090  1876              ADDS     r6,r6,r1              ;497
000092  46b4              MOV      r12,r6                ;497
000094  6877              LDR      r7,[r6,#4]            ;497
000096  4e1f              LDR      r6,|L1.276|
000098  3680              ADDS     r6,r6,#0x80           ;497
00009a  6077              STR      r7,[r6,#4]            ;497
00009c  4e1d              LDR      r6,|L1.276|
00009e  36c0              ADDS     r6,r6,#0xc0           ;480
0000a0  3008              ADDS     r0,r0,#8              ;480
                  |L1.162|
0000a2  6837              LDR      r7,[r6,#0]            ;500
0000a4  07ff              LSLS     r7,r7,#31             ;500
0000a6  d10b              BNE      |L1.192|
0000a8  2200              MOVS     r2,#0                 ;502
0000aa  f3828810          MSR      PRIMASK,r2            ;502
0000ae  6872              LDR      r2,[r6,#4]            ;503
0000b0  0913              LSRS     r3,r2,#4              ;503
0000b2  4a18              LDR      r2,|L1.276|
0000b4  011b              LSLS     r3,r3,#4              ;503
0000b6  6053              STR      r3,[r2,#4]            ;503
0000b8  6852              LDR      r2,[r2,#4]            ;504
0000ba  1b52              SUBS     r2,r2,r5              ;504
0000bc  0893              LSRS     r3,r2,#2              ;504
0000be  1e7a              SUBS     r2,r7,#1              ;505
                  |L1.192|
0000c0  6837              LDR      r7,[r6,#0]            ;508
0000c2  063f              LSLS     r7,r7,#24             ;508
0000c4  0fbf              LSRS     r7,r7,#30             ;508
0000c6  d002              BEQ      |L1.206|
0000c8  2a00              CMP      r2,#0                 ;508
0000ca  d0ea              BEQ      |L1.162|
0000cc  e001              B        |L1.210|
                  |L1.206|
0000ce  2a00              CMP      r2,#0                 ;510
0000d0  d007              BEQ      |L1.226|
                  |L1.210|
0000d2  2a00              CMP      r2,#0                 ;521
0000d4  db19              BLT      |L1.266|
                  |L1.214|
0000d6  1d24              ADDS     r4,r4,#4              ;521
                  |L1.216|
0000d8  2c40              CMP      r4,#0x40              ;475
0000da  d3b3              BCC      |L1.68|
0000dc  2a00              CMP      r2,#0                 ;526
0000de  d00d              BEQ      |L1.252|
0000e0  e013              B        |L1.266|
                  |L1.226|
0000e2  4666              MOV      r6,r12                ;526
0000e4  68b7              LDR      r7,[r6,#8]            ;515
0000e6  4e0b              LDR      r6,|L1.276|
0000e8  3680              ADDS     r6,r6,#0x80           ;515
0000ea  60b7              STR      r7,[r6,#8]            ;515
0000ec  4667              MOV      r7,r12                ;515
0000ee  68ff              LDR      r7,[r7,#0xc]          ;516
0000f0  60f7              STR      r7,[r6,#0xc]          ;516
0000f2  2600              MOVS     r6,#0                 ;517
0000f4  f3868810          MSR      PRIMASK,r6            ;517
0000f8  3008              ADDS     r0,r0,#8              ;517
0000fa  e7ec              B        |L1.214|
                  |L1.252|
0000fc  2200              MOVS     r2,#0                 ;528
0000fe  4696              MOV      lr,r2                 ;528
000100  4a04              LDR      r2,|L1.276|
000102  3240              ADDS     r2,r2,#0x40           ;529
                  |L1.260|
000104  6814              LDR      r4,[r2,#0]            ;529
000106  07e4              LSLS     r4,r4,#31             ;529
000108  d1fc              BNE      |L1.260|
                  |L1.266|
00010a  4672              MOV      r2,lr                 ;532
00010c  2a00              CMP      r2,#0                 ;532
00010e  d184              BNE      |L1.26|
000110  bdf0              POP      {r4-r7,pc}
;;;535    #if defined ( __CC_ARM )
                          ENDP

000112  0000              DCW      0x0000
                  |L1.276|
                          DCD      0x4000c000

                          AREA ||i.FMC_CheckAllOne||, CODE, READONLY, ALIGN=2

                  FMC_CheckAllOne PROC
;;;385     */
;;;386    uint32_t FMC_CheckAllOne(uint32_t u32addr, uint32_t u32count)
000000  b570              PUSH     {r4-r6,lr}
;;;387    {
000002  4603              MOV      r3,r0
;;;388        uint32_t ret = READ_ALLONE_CMD_FAIL;
000004  2000              MOVS     r0,#0
000006  43c0              MVNS     r0,r0
;;;389    
;;;390        FMC->ISPSTS = 0x80UL; /* clear check all one bit */
000008  4c11              LDR      r4,|L2.80|
00000a  2280              MOVS     r2,#0x80
00000c  6022              STR      r2,[r4,#0]
;;;391    
;;;392        FMC->ISPCMD = FMC_ISPCMD_RUN_ALL1;
00000e  4a10              LDR      r2,|L2.80|
000010  2528              MOVS     r5,#0x28
000012  3a40              SUBS     r2,r2,#0x40
000014  60d5              STR      r5,[r2,#0xc]
;;;393        FMC->ISPADDR = u32addr;
000016  6053              STR      r3,[r2,#4]
;;;394        FMC->ISPDAT = u32count;
000018  6091              STR      r1,[r2,#8]
;;;395        FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
00001a  2501              MOVS     r5,#1
00001c  6115              STR      r5,[r2,#0x10]
                  |L2.30|
;;;396    
;;;397        while (FMC->ISPSTS & FMC_ISPSTS_ISPBUSY_Msk) { }
00001e  6821              LDR      r1,[r4,#0]
000020  07c9              LSLS     r1,r1,#31
000022  d1fc              BNE      |L2.30|
;;;398    
;;;399        do
;;;400        {
;;;401            FMC->ISPCMD = FMC_ISPCMD_READ_ALL1;
000024  2608              MOVS     r6,#8
                  |L2.38|
000026  60d6              STR      r6,[r2,#0xc]
;;;402            FMC->ISPADDR = u32addr;
000028  6053              STR      r3,[r2,#4]
;;;403            FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
00002a  6115              STR      r5,[r2,#0x10]
                  |L2.44|
;;;404    
;;;405            while (FMC->ISPSTS & FMC_ISPSTS_ISPBUSY_Msk) { }
00002c  6821              LDR      r1,[r4,#0]
00002e  07c9              LSLS     r1,r1,#31
000030  d1fc              BNE      |L2.44|
;;;406        }
;;;407        while (FMC->ISPDAT == 0UL);
000032  6891              LDR      r1,[r2,#8]
000034  2900              CMP      r1,#0
000036  d0f6              BEQ      |L2.38|
;;;408    
;;;409        if (FMC->ISPDAT == READ_ALLONE_YES)
000038  6893              LDR      r3,[r2,#8]
00003a  4906              LDR      r1,|L2.84|
00003c  428b              CMP      r3,r1
00003e  d100              BNE      |L2.66|
;;;410        {
;;;411            ret = FMC->ISPDAT;
000040  6890              LDR      r0,[r2,#8]
                  |L2.66|
;;;412        }
;;;413    
;;;414        if (FMC->ISPDAT == READ_ALLONE_NOT)
000042  6891              LDR      r1,[r2,#8]
000044  4b04              LDR      r3,|L2.88|
000046  4299              CMP      r1,r3
000048  d100              BNE      |L2.76|
;;;415        {
;;;416            ret = FMC->ISPDAT;
00004a  6890              LDR      r0,[r2,#8]
                  |L2.76|
;;;417        }
;;;418    
;;;419        return ret;
;;;420    }
00004c  bd70              POP      {r4-r6,pc}
;;;421    
                          ENDP

00004e  0000              DCW      0x0000
                  |L2.80|
                          DCD      0x4000c040
                  |L2.84|
                          DCD      0xa11fffff
                  |L2.88|
                          DCD      0xa1100000

                          AREA ||i.FMC_Close||, CODE, READONLY, ALIGN=2

                  FMC_Close PROC
;;;35       */
;;;36     void FMC_Close(void)
000000  4802              LDR      r0,|L3.12|
;;;37     {
;;;38         FMC->ISPCTL &= ~FMC_ISPCTL_ISPEN_Msk;
000002  6801              LDR      r1,[r0,#0]
000004  0849              LSRS     r1,r1,#1
000006  0049              LSLS     r1,r1,#1
000008  6001              STR      r1,[r0,#0]
;;;39     }
00000a  4770              BX       lr
;;;40     
                          ENDP

                  |L3.12|
                          DCD      0x4000c000

                          AREA ||i.FMC_Erase||, CODE, READONLY, ALIGN=2

                  FMC_Erase PROC
;;;49       */
;;;50     int32_t FMC_Erase(uint32_t u32PageAddr)
000000  4603              MOV      r3,r0
;;;51     {
;;;52         int32_t  ret = 0;
;;;53     
;;;54         if (u32PageAddr == FMC_SPROM_BASE)
000002  2101              MOVS     r1,#1
000004  b500              PUSH     {lr}                  ;51
000006  2000              MOVS     r0,#0                 ;52
000008  0549              LSLS     r1,r1,#21
00000a  428b              CMP      r3,r1
00000c  d103              BNE      |L4.22|
;;;55         {
;;;56             ret = FMC_Erase_SPROM();
00000e  f7fffffe          BL       FMC_Erase_SPROM
;;;57         }
;;;58     
;;;59         if (ret == 0)
000012  2800              CMP      r0,#0
000014  d111              BNE      |L4.58|
                  |L4.22|
;;;60         {
;;;61             FMC->ISPCMD = FMC_ISPCMD_PAGE_ERASE;
000016  4909              LDR      r1,|L4.60|
000018  2222              MOVS     r2,#0x22
00001a  60ca              STR      r2,[r1,#0xc]
;;;62             FMC->ISPADDR = u32PageAddr;
00001c  604b              STR      r3,[r1,#4]
;;;63             FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
00001e  2201              MOVS     r2,#1
000020  610a              STR      r2,[r1,#0x10]
                  |L4.34|
;;;64     
;;;65             while (FMC->ISPTRG & FMC_ISPTRG_ISPGO_Msk) { }
000022  690a              LDR      r2,[r1,#0x10]
000024  07d2              LSLS     r2,r2,#31
000026  d1fc              BNE      |L4.34|
;;;66     
;;;67             if (FMC->ISPCTL & FMC_ISPCTL_ISPFF_Msk)
000028  680a              LDR      r2,[r1,#0]
00002a  0652              LSLS     r2,r2,#25
00002c  d505              BPL      |L4.58|
;;;68             {
;;;69                 FMC->ISPCTL |= FMC_ISPCTL_ISPFF_Msk;
00002e  6808              LDR      r0,[r1,#0]
000030  2240              MOVS     r2,#0x40
000032  4310              ORRS     r0,r0,r2
000034  6008              STR      r0,[r1,#0]
;;;70                 ret = -1;
000036  2000              MOVS     r0,#0
000038  43c0              MVNS     r0,r0
                  |L4.58|
;;;71             }
;;;72         }
;;;73         return ret;
;;;74     }
00003a  bd00              POP      {pc}
;;;75     
                          ENDP

                  |L4.60|
                          DCD      0x4000c000

                          AREA ||i.FMC_Erase_Bank||, CODE, READONLY, ALIGN=2

                  FMC_Erase_Bank PROC
;;;86      */
;;;87     int32_t FMC_Erase_Bank(uint32_t u32BankAddr)
000000  4602              MOV      r2,r0
;;;88     {
;;;89         int32_t ret = 0;
000002  2000              MOVS     r0,#0
;;;90     
;;;91         FMC->ISPCMD = FMC_ISPCMD_BANK_ERASE;
000004  4909              LDR      r1,|L5.44|
000006  2323              MOVS     r3,#0x23
000008  60cb              STR      r3,[r1,#0xc]
;;;92         FMC->ISPADDR = u32BankAddr;
00000a  604a              STR      r2,[r1,#4]
;;;93         FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
00000c  2201              MOVS     r2,#1
00000e  610a              STR      r2,[r1,#0x10]
                  |L5.16|
;;;94     
;;;95         while (FMC->ISPTRG & FMC_ISPTRG_ISPGO_Msk) { }
000010  690a              LDR      r2,[r1,#0x10]
000012  07d2              LSLS     r2,r2,#31
000014  d1fc              BNE      |L5.16|
;;;96     
;;;97         if (FMC->ISPCTL & FMC_ISPCTL_ISPFF_Msk)
000016  680a              LDR      r2,[r1,#0]
000018  0652              LSLS     r2,r2,#25
00001a  d505              BPL      |L5.40|
;;;98         {
;;;99             FMC->ISPCTL |= FMC_ISPCTL_ISPFF_Msk;
00001c  6808              LDR      r0,[r1,#0]
00001e  2240              MOVS     r2,#0x40
000020  4310              ORRS     r0,r0,r2
000022  6008              STR      r0,[r1,#0]
;;;100            ret = -1;
000024  2000              MOVS     r0,#0
000026  43c0              MVNS     r0,r0
                  |L5.40|
;;;101        }
;;;102        return ret;
;;;103    }
000028  4770              BX       lr
;;;104    
                          ENDP

00002a  0000              DCW      0x0000
                  |L5.44|
                          DCD      0x4000c000

                          AREA ||i.FMC_Erase_SPROM||, CODE, READONLY, ALIGN=2

                  FMC_Erase_SPROM PROC
;;;110      */
;;;111    int32_t FMC_Erase_SPROM(void)
000000  2000              MOVS     r0,#0
;;;112    {
;;;113        int32_t  ret = 0;
;;;114    
;;;115        FMC->ISPCMD = FMC_ISPCMD_PAGE_ERASE;
000002  490b              LDR      r1,|L6.48|
000004  2222              MOVS     r2,#0x22
000006  60ca              STR      r2,[r1,#0xc]
;;;116        FMC->ISPADDR = FMC_SPROM_BASE;
000008  2201              MOVS     r2,#1
00000a  0552              LSLS     r2,r2,#21
00000c  604a              STR      r2,[r1,#4]
;;;117        FMC->ISPDAT = 0x0055AA03UL;
00000e  4a09              LDR      r2,|L6.52|
000010  608a              STR      r2,[r1,#8]
;;;118        FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
000012  2201              MOVS     r2,#1
000014  610a              STR      r2,[r1,#0x10]
                  |L6.22|
;;;119    
;;;120        while (FMC->ISPTRG & FMC_ISPTRG_ISPGO_Msk) { }
000016  690a              LDR      r2,[r1,#0x10]
000018  07d2              LSLS     r2,r2,#31
00001a  d1fc              BNE      |L6.22|
;;;121    
;;;122        if (FMC->ISPCTL & FMC_ISPCTL_ISPFF_Msk)
00001c  680a              LDR      r2,[r1,#0]
00001e  0652              LSLS     r2,r2,#25
000020  d505              BPL      |L6.46|
;;;123        {
;;;124            FMC->ISPCTL |= FMC_ISPCTL_ISPFF_Msk;
000022  6808              LDR      r0,[r1,#0]
000024  2240              MOVS     r2,#0x40
000026  4310              ORRS     r0,r0,r2
000028  6008              STR      r0,[r1,#0]
;;;125            ret = -1;
00002a  2000              MOVS     r0,#0
00002c  43c0              MVNS     r0,r0
                  |L6.46|
;;;126        }
;;;127        return ret;
;;;128    }
00002e  4770              BX       lr
;;;129    
                          ENDP

                  |L6.48|
                          DCD      0x4000c000
                  |L6.52|
                          DCD      0x0055aa03

                          AREA ||i.FMC_GetBootSource||, CODE, READONLY, ALIGN=2

                  FMC_GetBootSource PROC
;;;160      */
;;;161    int32_t FMC_GetBootSource (void)
000000  4903              LDR      r1,|L7.16|
;;;162    {
;;;163        int32_t  ret = 0;
000002  2000              MOVS     r0,#0
;;;164    
;;;165        if (FMC->ISPCTL & FMC_ISPCTL_BS_Msk)
000004  6809              LDR      r1,[r1,#0]
000006  0789              LSLS     r1,r1,#30
000008  d500              BPL      |L7.12|
;;;166        {
;;;167            ret = 1;
00000a  2001              MOVS     r0,#1
                  |L7.12|
;;;168        }
;;;169    
;;;170        return ret;
;;;171    }
00000c  4770              BX       lr
;;;172    
                          ENDP

00000e  0000              DCW      0x0000
                  |L7.16|
                          DCD      0x4000c000

                          AREA ||i.FMC_GetChkSum||, CODE, READONLY, ALIGN=2

                  FMC_GetChkSum PROC
;;;344      */
;;;345    uint32_t  FMC_GetChkSum(uint32_t u32addr, uint32_t u32count)
000000  4602              MOV      r2,r0
;;;346    {
000002  b510              PUSH     {r4,lr}
;;;347        uint32_t   ret;
;;;348    
;;;349        if ((u32addr % 512UL) || (u32count % 512UL))
000004  430a              ORRS     r2,r2,r1
000006  05d2              LSLS     r2,r2,#23
000008  d002              BEQ      |L8.16|
;;;350        {
;;;351            ret = 0xFFFFFFFF;
00000a  2000              MOVS     r0,#0
00000c  43c0              MVNS     r0,r0
;;;352        }
;;;353        else
;;;354        {
;;;355            FMC->ISPCMD  = FMC_ISPCMD_RUN_CKS;
;;;356            FMC->ISPADDR = u32addr;
;;;357            FMC->ISPDAT  = u32count;
;;;358            FMC->ISPTRG  = FMC_ISPTRG_ISPGO_Msk;
;;;359    
;;;360            while (FMC->ISPSTS & FMC_ISPSTS_ISPBUSY_Msk) { }
;;;361    
;;;362            FMC->ISPCMD = FMC_ISPCMD_READ_CKS;
;;;363            FMC->ISPADDR    = u32addr;
;;;364            FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
;;;365    
;;;366            while (FMC->ISPSTS & FMC_ISPSTS_ISPBUSY_Msk) { }
;;;367    
;;;368            ret = FMC->ISPDAT;
;;;369        }
;;;370    
;;;371        return ret;
;;;372    }
00000e  bd10              POP      {r4,pc}
                  |L8.16|
000010  4b0a              LDR      r3,|L8.60|
000012  222d              MOVS     r2,#0x2d              ;355
000014  60da              STR      r2,[r3,#0xc]          ;355
000016  6058              STR      r0,[r3,#4]            ;356
000018  6099              STR      r1,[r3,#8]            ;357
00001a  2401              MOVS     r4,#1                 ;358
00001c  611c              STR      r4,[r3,#0x10]         ;358
00001e  4907              LDR      r1,|L8.60|
000020  3140              ADDS     r1,r1,#0x40           ;360
                  |L8.34|
000022  680a              LDR      r2,[r1,#0]            ;360
000024  07d2              LSLS     r2,r2,#31             ;360
000026  d1fc              BNE      |L8.34|
000028  220d              MOVS     r2,#0xd               ;362
00002a  60da              STR      r2,[r3,#0xc]          ;362
00002c  6058              STR      r0,[r3,#4]            ;363
00002e  611c              STR      r4,[r3,#0x10]         ;364
                  |L8.48|
000030  6808              LDR      r0,[r1,#0]            ;366
000032  07c0              LSLS     r0,r0,#31             ;366
000034  d1fc              BNE      |L8.48|
000036  6898              LDR      r0,[r3,#8]            ;368
000038  bd10              POP      {r4,pc}
;;;373    
                          ENDP

00003a  0000              DCW      0x0000
                  |L8.60|
                          DCD      0x4000c000

                          AREA ||i.FMC_Open||, CODE, READONLY, ALIGN=2

                  FMC_Open PROC
;;;177      */
;;;178    void FMC_Open(void)
000000  4802              LDR      r0,|L9.12|
;;;179    {
;;;180        FMC->ISPCTL |=  FMC_ISPCTL_ISPEN_Msk;
000002  6801              LDR      r1,[r0,#0]
000004  2201              MOVS     r2,#1
000006  4311              ORRS     r1,r1,r2
000008  6001              STR      r1,[r0,#0]
;;;181    }
00000a  4770              BX       lr
;;;182    
                          ENDP

                  |L9.12|
                          DCD      0x4000c000

                          AREA ||i.FMC_Read||, CODE, READONLY, ALIGN=2

                  FMC_Read PROC
;;;189      */
;;;190    uint32_t FMC_Read(uint32_t u32Addr)
000000  4905              LDR      r1,|L10.24|
;;;191    {
;;;192        FMC->ISPCMD = FMC_ISPCMD_READ;
000002  2200              MOVS     r2,#0
000004  60ca              STR      r2,[r1,#0xc]
;;;193        FMC->ISPADDR = u32Addr;
000006  6048              STR      r0,[r1,#4]
;;;194        FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
000008  2001              MOVS     r0,#1
00000a  6108              STR      r0,[r1,#0x10]
                  |L10.12|
;;;195        while (FMC->ISPTRG & FMC_ISPTRG_ISPGO_Msk) { }
00000c  6908              LDR      r0,[r1,#0x10]
00000e  07c0              LSLS     r0,r0,#31
000010  d1fc              BNE      |L10.12|
;;;196    
;;;197        return FMC->ISPDAT;
000012  6888              LDR      r0,[r1,#8]
;;;198    }
000014  4770              BX       lr
;;;199    
                          ENDP

000016  0000              DCW      0x0000
                  |L10.24|
                          DCD      0x4000c000

                          AREA ||i.FMC_ReadConfig||, CODE, READONLY, ALIGN=2

                  FMC_ReadConfig PROC
;;;285      */
;;;286    int32_t FMC_ReadConfig(uint32_t u32Config[], uint32_t u32Count)
000000  b530              PUSH     {r4,r5,lr}
;;;287    {
000002  4604              MOV      r4,r0
;;;288        int32_t   ret = 0;
;;;289    
;;;290        u32Config[0] = FMC_Read(FMC_CONFIG_BASE);
000004  2003              MOVS     r0,#3
000006  460b              MOV      r3,r1                 ;287
000008  2500              MOVS     r5,#0                 ;288
00000a  0500              LSLS     r0,r0,#20
00000c  f7fffffe          BL       FMC_Read
;;;291    
;;;292        if (u32Count > 3UL)
000010  6020              STR      r0,[r4,#0]
000012  2b03              CMP      r3,#3
000014  d901              BLS      |L11.26|
;;;293        {
;;;294            ret = -1;
000016  1e6d              SUBS     r5,r5,#1
000018  e00c              B        |L11.52|
                  |L11.26|
;;;295        }
;;;296        else
;;;297        {
;;;298            if(u32Count > 1UL)
00001a  2b01              CMP      r3,#1
00001c  d903              BLS      |L11.38|
;;;299            {
;;;300                u32Config[1] = FMC_Read(FMC_CONFIG_BASE+4UL);
00001e  4806              LDR      r0,|L11.56|
000020  f7fffffe          BL       FMC_Read
000024  6060              STR      r0,[r4,#4]
                  |L11.38|
;;;301            }
;;;302            if(u32Count > 2UL)
000026  2b02              CMP      r3,#2
000028  d904              BLS      |L11.52|
;;;303            {
;;;304                u32Config[2] = FMC_Read(FMC_CONFIG_BASE+8UL);
00002a  4803              LDR      r0,|L11.56|
00002c  1d00              ADDS     r0,r0,#4
00002e  f7fffffe          BL       FMC_Read
000032  60a0              STR      r0,[r4,#8]
                  |L11.52|
;;;305            }
;;;306        }
;;;307        return ret;
000034  4628              MOV      r0,r5
;;;308    }
000036  bd30              POP      {r4,r5,pc}
;;;309    
                          ENDP

                  |L11.56|
                          DCD      0x00300004

                          AREA ||i.FMC_ReadDataFlashBaseAddr||, CODE, READONLY, ALIGN=2

                  FMC_ReadDataFlashBaseAddr PROC
;;;204      */
;;;205    uint32_t FMC_ReadDataFlashBaseAddr(void)
000000  4801              LDR      r0,|L12.8|
;;;206    {
;;;207        return FMC->DFBA;
000002  6940              LDR      r0,[r0,#0x14]
;;;208    }
000004  4770              BX       lr
;;;209    
                          ENDP

000006  0000              DCW      0x0000
                  |L12.8|
                          DCD      0x4000c000

                          AREA ||i.FMC_RemapBank||, CODE, READONLY, ALIGN=2

                  FMC_RemapBank PROC
;;;135     */
;;;136    int32_t FMC_RemapBank(uint32_t u32BankIdx)
000000  4602              MOV      r2,r0
;;;137    {
;;;138        int32_t ret = 0;
000002  2000              MOVS     r0,#0
;;;139    
;;;140        FMC->ISPCMD = FMC_ISPCMD_BANK_REMAP;
000004  490a              LDR      r1,|L13.48|
000006  232c              MOVS     r3,#0x2c
000008  60cb              STR      r3,[r1,#0xc]
;;;141        FMC->ISPADDR = u32BankIdx;
00000a  604a              STR      r2,[r1,#4]
;;;142        FMC->ISPDAT = 0x5AA55AA5UL;
00000c  4a09              LDR      r2,|L13.52|
00000e  608a              STR      r2,[r1,#8]
;;;143        FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
000010  2201              MOVS     r2,#1
000012  610a              STR      r2,[r1,#0x10]
                  |L13.20|
;;;144    
;;;145        while (FMC->ISPTRG & FMC_ISPTRG_ISPGO_Msk) { }
000014  690a              LDR      r2,[r1,#0x10]
000016  07d2              LSLS     r2,r2,#31
000018  d1fc              BNE      |L13.20|
;;;146    
;;;147        if (FMC->ISPCTL & FMC_ISPCTL_ISPFF_Msk)
00001a  680a              LDR      r2,[r1,#0]
00001c  0652              LSLS     r2,r2,#25
00001e  d505              BPL      |L13.44|
;;;148        {
;;;149            FMC->ISPCTL |= FMC_ISPCTL_ISPFF_Msk;
000020  6808              LDR      r0,[r1,#0]
000022  2240              MOVS     r2,#0x40
000024  4310              ORRS     r0,r0,r2
000026  6008              STR      r0,[r1,#0]
;;;150            ret = -1;
000028  2000              MOVS     r0,#0
00002a  43c0              MVNS     r0,r0
                  |L13.44|
;;;151        }
;;;152        return ret;
;;;153    }
00002c  4770              BX       lr
;;;154    
                          ENDP

00002e  0000              DCW      0x0000
                  |L13.48|
                          DCD      0x4000c000
                  |L13.52|
                          DCD      0x5aa55aa5

                          AREA ||i.FMC_SetBootSource||, CODE, READONLY, ALIGN=2

                  FMC_SetBootSource PROC
;;;219      */
;;;220    void FMC_SetBootSource(int32_t i32BootSrc)
000000  4904              LDR      r1,|L14.20|
;;;221    {
;;;222        if(i32BootSrc)
;;;223        {
;;;224            FMC->ISPCTL |= FMC_ISPCTL_BS_Msk; /* Boot from LDROM */
000002  2202              MOVS     r2,#2
000004  2800              CMP      r0,#0                 ;222
;;;225        }
;;;226        else
;;;227        {
;;;228            FMC->ISPCTL &= ~FMC_ISPCTL_BS_Msk;/* Boot from APROM */
000006  6808              LDR      r0,[r1,#0]
000008  d001              BEQ      |L14.14|
00000a  4310              ORRS     r0,r0,r2              ;224
00000c  e000              B        |L14.16|
                  |L14.14|
00000e  4390              BICS     r0,r0,r2
                  |L14.16|
000010  6008              STR      r0,[r1,#0]            ;224
;;;229        }
;;;230    }
000012  4770              BX       lr
;;;231    
                          ENDP

                  |L14.20|
                          DCD      0x4000c000

                          AREA ||i.FMC_Write||, CODE, READONLY, ALIGN=2

                  FMC_Write PROC
;;;238      */
;;;239    void FMC_Write(uint32_t u32Addr, uint32_t u32Data)
000000  4a05              LDR      r2,|L15.24|
;;;240    {
;;;241        FMC->ISPCMD = FMC_ISPCMD_PROGRAM;
000002  2321              MOVS     r3,#0x21
000004  60d3              STR      r3,[r2,#0xc]
;;;242        FMC->ISPADDR = u32Addr;
000006  6050              STR      r0,[r2,#4]
;;;243        FMC->ISPDAT = u32Data;
000008  6091              STR      r1,[r2,#8]
;;;244        FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
00000a  2001              MOVS     r0,#1
00000c  6110              STR      r0,[r2,#0x10]
                  |L15.14|
;;;245        while (FMC->ISPTRG & FMC_ISPTRG_ISPGO_Msk) { }
00000e  6910              LDR      r0,[r2,#0x10]
000010  07c0              LSLS     r0,r0,#31
000012  d1fc              BNE      |L15.14|
;;;246    }
000014  4770              BX       lr
;;;247    
                          ENDP

000016  0000              DCW      0x0000
                  |L15.24|
                          DCD      0x4000c000

                          AREA ||i.FMC_Write8Bytes||, CODE, READONLY, ALIGN=2

                  FMC_Write8Bytes PROC
;;;256      */
;;;257    int32_t FMC_Write8Bytes(uint32_t u32addr, uint32_t u32data0, uint32_t u32data1)
000000  b530              PUSH     {r4,r5,lr}
;;;258    {
000002  4604              MOV      r4,r0
;;;259        int32_t  ret = 0;
000004  2000              MOVS     r0,#0
;;;260    
;;;261        FMC->ISPCMD  = FMC_ISPCMD_PROGRAM_64;
000006  4b0c              LDR      r3,|L16.56|
000008  2561              MOVS     r5,#0x61
00000a  60dd              STR      r5,[r3,#0xc]
;;;262        FMC->ISPADDR = u32addr;
00000c  605c              STR      r4,[r3,#4]
;;;263        FMC->MPDAT0  = u32data0;
00000e  4c0a              LDR      r4,|L16.56|
000010  3480              ADDS     r4,r4,#0x80
000012  6021              STR      r1,[r4,#0]
;;;264        FMC->MPDAT1  = u32data1;
000014  6062              STR      r2,[r4,#4]
;;;265        FMC->ISPTRG  = FMC_ISPTRG_ISPGO_Msk;
000016  2101              MOVS     r1,#1
000018  6119              STR      r1,[r3,#0x10]
;;;266    
;;;267        while (FMC->ISPSTS & FMC_ISPSTS_ISPBUSY_Msk) { }
00001a  4907              LDR      r1,|L16.56|
00001c  3140              ADDS     r1,r1,#0x40
                  |L16.30|
00001e  680a              LDR      r2,[r1,#0]
000020  07d2              LSLS     r2,r2,#31
000022  d1fc              BNE      |L16.30|
;;;268    
;;;269        if (FMC->ISPSTS & FMC_ISPSTS_ISPFF_Msk)
000024  680a              LDR      r2,[r1,#0]
000026  0652              LSLS     r2,r2,#25
000028  d505              BPL      |L16.54|
;;;270        {
;;;271            FMC->ISPSTS |= FMC_ISPSTS_ISPFF_Msk;
00002a  6808              LDR      r0,[r1,#0]
00002c  2240              MOVS     r2,#0x40
00002e  4310              ORRS     r0,r0,r2
000030  6008              STR      r0,[r1,#0]
;;;272            ret = -1;
000032  2000              MOVS     r0,#0
000034  43c0              MVNS     r0,r0
                  |L16.54|
;;;273        }
;;;274        return ret;
;;;275    }
000036  bd30              POP      {r4,r5,pc}
;;;276    
                          ENDP

                  |L16.56|
                          DCD      0x4000c000

                          AREA ||i.FMC_WriteConfig||, CODE, READONLY, ALIGN=1

                  FMC_WriteConfig PROC
;;;318     */
;;;319    int32_t FMC_WriteConfig(uint32_t u32Config[], uint32_t u32Count)
000000  b5f3              PUSH     {r0,r1,r4-r7,lr}
;;;320    {
000002  4606              MOV      r6,r0
;;;321        int32_t ret = 0;
000004  2000              MOVS     r0,#0
000006  b081              SUB      sp,sp,#4              ;320
;;;322        uint32_t i;
;;;323    
;;;324        for (i = 0u; i < u32Count; i++)
000008  4604              MOV      r4,r0
00000a  9000              STR      r0,[sp,#0]            ;320
00000c  e010              B        |L17.48|
                  |L17.14|
;;;325        {
;;;326            FMC_Write(FMC_CONFIG_BASE + i * 4u, u32Config[i]);
00000e  00a5              LSLS     r5,r4,#2
000010  2003              MOVS     r0,#3
000012  0500              LSLS     r0,r0,#20
000014  1828              ADDS     r0,r5,r0
000016  5971              LDR      r1,[r6,r5]
000018  4607              MOV      r7,r0
00001a  f7fffffe          BL       FMC_Write
00001e  4638              MOV      r0,r7
;;;327    
;;;328            if (FMC_Read(FMC_CONFIG_BASE + i * 4u) != u32Config[i])
000020  f7fffffe          BL       FMC_Read
000024  5971              LDR      r1,[r6,r5]
000026  4288              CMP      r0,r1
000028  d001              BEQ      |L17.46|
;;;329            {
;;;330                ret = 1;
00002a  2001              MOVS     r0,#1
00002c  9000              STR      r0,[sp,#0]
                  |L17.46|
00002e  1c64              ADDS     r4,r4,#1
                  |L17.48|
000030  9802              LDR      r0,[sp,#8]            ;324
000032  4284              CMP      r4,r0                 ;324
000034  d3eb              BCC      |L17.14|
;;;331            }
;;;332        }
;;;333    
;;;334        return ret;
000036  9800              LDR      r0,[sp,#0]
;;;335    }
000038  bdfe              POP      {r1-r7,pc}
;;;336    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Library\\StdDriver\\src\\fmc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_fmc_c_65c03504____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___5_fmc_c_65c03504____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_fmc_c_65c03504____REVSH|
#line 402
|__asm___5_fmc_c_65c03504____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
