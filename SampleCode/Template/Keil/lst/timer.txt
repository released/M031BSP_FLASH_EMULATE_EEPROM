; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\timer.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\timer.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M031\Include -I..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\timer.crf ..\..\..\Library\StdDriver\src\timer.c]
                          THUMB

                          AREA ||i.TIMER_Close||, CODE, READONLY, ALIGN=1

                  TIMER_Close PROC
;;;75       */
;;;76     void TIMER_Close(TIMER_T *timer)
000000  2100              MOVS     r1,#0
;;;77     {
;;;78         timer->CTL = 0;
000002  6001              STR      r1,[r0,#0]
;;;79         timer->EXTCTL = 0;
000004  6141              STR      r1,[r0,#0x14]
;;;80     }
000006  4770              BX       lr
;;;81     
                          ENDP


                          AREA ||i.TIMER_Delay||, CODE, READONLY, ALIGN=2

                  TIMER_Delay PROC
;;;93       */
;;;94     void TIMER_Delay(TIMER_T *timer, uint32_t u32Usec)
000000  b5f8              PUSH     {r3-r7,lr}
;;;95     {
000002  460c              MOV      r4,r1
000004  4606              MOV      r6,r0
;;;96         uint32_t u32Clk = TIMER_GetModuleClock(timer);
000006  f7fffffe          BL       TIMER_GetModuleClock
;;;97         uint32_t u32Prescale = 0, delay = (SystemCoreClock / u32Clk) + 1;
00000a  4601              MOV      r1,r0
00000c  9000              STR      r0,[sp,#0]
00000e  481e              LDR      r0,|L2.136|
000010  2700              MOVS     r7,#0
000012  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
000014  f7fffffe          BL       __aeabi_uidivmod
000018  1c45              ADDS     r5,r0,#1
;;;98         uint32_t u32Cmpr, u32NsecPerTick;
;;;99     
;;;100        /* Clear current timer configuration */
;;;101        timer->CTL = 0;
00001a  2000              MOVS     r0,#0
00001c  6030              STR      r0,[r6,#0]
;;;102        timer->EXTCTL = 0;
00001e  6170              STR      r0,[r6,#0x14]
;;;103    
;;;104        if(u32Clk <= 1000000)   /* min delay is 1000 us if timer clock source is <= 1 MHz */
000020  491a              LDR      r1,|L2.140|
000022  9800              LDR      r0,[sp,#0]
000024  4288              CMP      r0,r1
000026  d805              BHI      |L2.52|
;;;105        {
;;;106            if(u32Usec < 1000)
000028  207d              MOVS     r0,#0x7d
00002a  00c0              LSLS     r0,r0,#3
00002c  4284              CMP      r4,r0
00002e  d205              BCS      |L2.60|
;;;107                u32Usec = 1000;
000030  4604              MOV      r4,r0
000032  e006              B        |L2.66|
                  |L2.52|
;;;108            if(u32Usec > 1000000)
;;;109                u32Usec = 1000000;
;;;110        }
;;;111        else
;;;112        {
;;;113            if(u32Usec < 100)
000034  2c64              CMP      r4,#0x64
000036  d201              BCS      |L2.60|
;;;114                u32Usec = 100;
000038  2464              MOVS     r4,#0x64
00003a  e002              B        |L2.66|
                  |L2.60|
;;;115            if(u32Usec > 1000000)
00003c  428c              CMP      r4,r1
00003e  d900              BLS      |L2.66|
;;;116                u32Usec = 1000000;
000040  460c              MOV      r4,r1
                  |L2.66|
;;;117        }
;;;118    
;;;119        if(u32Clk <= 1000000)
000042  9800              LDR      r0,[sp,#0]
000044  4288              CMP      r0,r1
000046  d808              BHI      |L2.90|
;;;120        {
;;;121            u32Prescale = 0;
;;;122            u32NsecPerTick = 1000000000 / u32Clk;
000048  4601              MOV      r1,r0
00004a  4811              LDR      r0,|L2.144|
00004c  f7fffffe          BL       __aeabi_uidivmod
000050  4601              MOV      r1,r0
;;;123            u32Cmpr = (u32Usec * 1000) / u32NsecPerTick;
000052  207d              MOVS     r0,#0x7d
000054  00c0              LSLS     r0,r0,#3
000056  4360              MULS     r0,r4,r0
000058  e005              B        |L2.102|
                  |L2.90|
;;;124        }
;;;125        else
;;;126        {
;;;127            u32Cmpr = u32Usec * (u32Clk / 1000000);
00005a  f7fffffe          BL       __aeabi_uidivmod
00005e  4360              MULS     r0,r4,r0
;;;128            u32Prescale = (u32Cmpr >> 24);  /* for 24 bits CMPDAT */
000060  0e07              LSRS     r7,r0,#24
;;;129            if (u32Prescale > 0)
000062  d002              BEQ      |L2.106|
;;;130                u32Cmpr = u32Cmpr / (u32Prescale + 1);
000064  1c79              ADDS     r1,r7,#1
                  |L2.102|
000066  f7fffffe          BL       __aeabi_uidivmod
                  |L2.106|
;;;131        }
;;;132    
;;;133        timer->CMP = u32Cmpr;
00006a  6070              STR      r0,[r6,#4]
;;;134        timer->CTL = TIMER_CTL_CNTEN_Msk | TIMER_ONESHOT_MODE | u32Prescale;
00006c  2001              MOVS     r0,#1
00006e  0780              LSLS     r0,r0,#30
000070  4307              ORRS     r7,r7,r0
000072  6037              STR      r7,[r6,#0]
;;;135    
;;;136        /* When system clock is faster than timer clock, it is possible timer active bit cannot set in time while we check it. */
;;;137        /* And the while loop below return immediately, so put a tiny delay here allowing timer start counting and raise active flag. */
;;;138        for(; delay > 0; delay--)
000074  2d00              CMP      r5,#0
000076  d002              BEQ      |L2.126|
                  |L2.120|
;;;139        {
;;;140            __NOP();
000078  bf00              NOP      
00007a  1e6d              SUBS     r5,r5,#1
00007c  d1fc              BNE      |L2.120|
                  |L2.126|
;;;141        }
;;;142    
;;;143        while(timer->CTL & TIMER_CTL_ACTSTS_Msk);
00007e  6830              LDR      r0,[r6,#0]
000080  0180              LSLS     r0,r0,#6
000082  d4fc              BMI      |L2.126|
;;;144    }
000084  bdf8              POP      {r3-r7,pc}
;;;145    
                          ENDP

000086  0000              DCW      0x0000
                  |L2.136|
                          DCD      SystemCoreClock
                  |L2.140|
                          DCD      0x000f4240
                  |L2.144|
                          DCD      0x3b9aca00

                          AREA ||i.TIMER_DisableCapture||, CODE, READONLY, ALIGN=1

                  TIMER_DisableCapture PROC
;;;178      */
;;;179    void TIMER_DisableCapture(TIMER_T *timer)
000000  6941              LDR      r1,[r0,#0x14]
;;;180    {
;;;181        timer->EXTCTL &= ~TIMER_EXTCTL_CAPEN_Msk;
000002  2208              MOVS     r2,#8
000004  4391              BICS     r1,r1,r2
000006  6141              STR      r1,[r0,#0x14]
;;;182    }
000008  4770              BX       lr
;;;183    
                          ENDP


                          AREA ||i.TIMER_DisableEventCounter||, CODE, READONLY, ALIGN=1

                  TIMER_DisableEventCounter PROC
;;;212      */
;;;213    void TIMER_DisableEventCounter(TIMER_T *timer)
000000  6801              LDR      r1,[r0,#0]
;;;214    {
;;;215        timer->CTL &= ~TIMER_CTL_EXTCNTEN_Msk;
000002  2201              MOVS     r2,#1
000004  0612              LSLS     r2,r2,#24
000006  4391              BICS     r1,r1,r2
000008  6001              STR      r1,[r0,#0]
;;;216    }
00000a  4770              BX       lr
;;;217    
                          ENDP


                          AREA ||i.TIMER_DisableFreqCounter||, CODE, READONLY, ALIGN=1

                  TIMER_DisableFreqCounter PROC
;;;288      */
;;;289    void TIMER_DisableFreqCounter(TIMER_T *timer)
000000  6801              LDR      r1,[r0,#0]
;;;290    {
;;;291        timer->CTL &= ~TIMER_CTL_INTRGEN_Msk;
000002  2201              MOVS     r2,#1
000004  0292              LSLS     r2,r2,#10
000006  4391              BICS     r1,r1,r2
000008  6001              STR      r1,[r0,#0]
;;;292    }
00000a  4770              BX       lr
;;;293    
                          ENDP


                          AREA ||i.TIMER_EnableCapture||, CODE, READONLY, ALIGN=1

                  TIMER_EnableCapture PROC
;;;163      */
;;;164    void TIMER_EnableCapture(TIMER_T *timer, uint32_t u32CapMode, uint32_t u32Edge)
000000  b510              PUSH     {r4,lr}
;;;165    {
;;;166        timer->EXTCTL = (timer->EXTCTL & ~(TIMER_EXTCTL_CAPFUNCS_Msk | TIMER_EXTCTL_CAPEDGE_Msk)) |
000002  6943              LDR      r3,[r0,#0x14]
000004  2416              MOVS     r4,#0x16
000006  43a3              BICS     r3,r3,r4
000008  430b              ORRS     r3,r3,r1
00000a  4313              ORRS     r3,r3,r2
00000c  2108              MOVS     r1,#8
00000e  430b              ORRS     r3,r3,r1
000010  6143              STR      r3,[r0,#0x14]
;;;167                        u32CapMode | u32Edge | TIMER_EXTCTL_CAPEN_Msk;
;;;168    }
000012  bd10              POP      {r4,pc}
;;;169    
                          ENDP


                          AREA ||i.TIMER_EnableEventCounter||, CODE, READONLY, ALIGN=1

                  TIMER_EnableEventCounter PROC
;;;197      */
;;;198    void TIMER_EnableEventCounter(TIMER_T *timer, uint32_t u32Edge)
000000  6942              LDR      r2,[r0,#0x14]
;;;199    {
;;;200        timer->EXTCTL = (timer->EXTCTL & ~TIMER_EXTCTL_CNTPHASE_Msk) | u32Edge;
000002  0852              LSRS     r2,r2,#1
000004  0052              LSLS     r2,r2,#1
000006  430a              ORRS     r2,r2,r1
000008  6142              STR      r2,[r0,#0x14]
;;;201        timer->CTL |= TIMER_CTL_EXTCNTEN_Msk;
00000a  6801              LDR      r1,[r0,#0]
00000c  2201              MOVS     r2,#1
00000e  0612              LSLS     r2,r2,#24
000010  4311              ORRS     r1,r1,r2
000012  6001              STR      r1,[r0,#0]
;;;202    }
000014  4770              BX       lr
;;;203    
                          ENDP


                          AREA ||i.TIMER_EnableFreqCounter||, CODE, READONLY, ALIGN=2

                  TIMER_EnableFreqCounter PROC
;;;268      */
;;;269    void TIMER_EnableFreqCounter(TIMER_T *timer, uint32_t u32DropCount, uint32_t u32Timeout, uint32_t u32EnableInt)
000000  4908              LDR      r1,|L8.36|
;;;270    {
;;;271        TIMER_T *t;    /* store the timer base to configure compare value */
;;;272    
;;;273        t = (timer == TIMER0) ? TIMER1 : TIMER3;
000002  4288              CMP      r0,r1
000004  d102              BNE      |L8.12|
000006  4907              LDR      r1,|L8.36|
000008  3120              ADDS     r1,r1,#0x20
00000a  e000              B        |L8.14|
                  |L8.12|
00000c  4906              LDR      r1,|L8.40|
                  |L8.14|
;;;274    
;;;275        t->CMP = 0xFFFFFF;
00000e  4a07              LDR      r2,|L8.44|
000010  604a              STR      r2,[r1,#4]
;;;276        t->EXTCTL = u32EnableInt ? TIMER_EXTCTL_CAPIEN_Msk : 0;
000012  2b00              CMP      r3,#0
000014  d001              BEQ      |L8.26|
000016  2220              MOVS     r2,#0x20
000018  e000              B        |L8.28|
                  |L8.26|
00001a  2200              MOVS     r2,#0
                  |L8.28|
00001c  614a              STR      r2,[r1,#0x14]
;;;277        timer->CTL = TIMER_CTL_INTRGEN_Msk | TIMER_CTL_CNTEN_Msk;
00001e  4904              LDR      r1,|L8.48|
000020  6001              STR      r1,[r0,#0]
;;;278    
;;;279        return;
;;;280    }
000022  4770              BX       lr
;;;281    
                          ENDP

                  |L8.36|
                          DCD      0x40050000
                  |L8.40|
                          DCD      0x40051020
                  |L8.44|
                          DCD      0x00ffffff
                  |L8.48|
                          DCD      0x40000400

                          AREA ||i.TIMER_GetModuleClock||, CODE, READONLY, ALIGN=2

                  TIMER_GetModuleClock PROC
;;;227      */
;;;228    uint32_t TIMER_GetModuleClock(TIMER_T *timer)
000000  b510              PUSH     {r4,lr}
;;;229    {
000002  b088              SUB      sp,sp,#0x20
000004  4604              MOV      r4,r0
;;;230        uint32_t u32Src;
;;;231        const uint32_t au32Clk[] = {__HXT, __LXT, 0, 0, 0, __LIRC, 0, __HIRC};
000006  2220              MOVS     r2,#0x20
000008  4915              LDR      r1,|L9.96|
00000a  4668              MOV      r0,sp
00000c  f7fffffe          BL       __aeabi_memcpy4
;;;232    
;;;233        if(timer == TIMER0)
;;;234            u32Src = (CLK->CLKSEL1 & CLK_CLKSEL1_TMR0SEL_Msk) >> CLK_CLKSEL1_TMR0SEL_Pos;
;;;235        else if(timer == TIMER1)
000010  4b14              LDR      r3,|L9.100|
000012  4a14              LDR      r2,|L9.100|
000014  4814              LDR      r0,|L9.104|
000016  3320              ADDS     r3,r3,#0x20
000018  4294              CMP      r4,r2                 ;233
00001a  d102              BNE      |L9.34|
00001c  6940              LDR      r0,[r0,#0x14]         ;234
;;;236            u32Src = (CLK->CLKSEL1 & CLK_CLKSEL1_TMR1SEL_Msk) >> CLK_CLKSEL1_TMR1SEL_Pos;
;;;237        else if(timer == TIMER2)
;;;238            u32Src = (CLK->CLKSEL1 & CLK_CLKSEL1_TMR2SEL_Msk) >> CLK_CLKSEL1_TMR2SEL_Pos;
;;;239        else  /* Timer 3 */
;;;240            u32Src = (CLK->CLKSEL1 & CLK_CLKSEL1_TMR3SEL_Msk) >> CLK_CLKSEL1_TMR3SEL_Pos;
;;;241    
;;;242        if(u32Src == 2)
;;;243        {
;;;244            if ((timer == TIMER0) || (timer == TIMER1))
;;;245                return CLK_GetPCLK0Freq();
;;;246            else
;;;247                return CLK_GetPCLK1Freq();
;;;248        }
;;;249    
;;;250        return (au32Clk[u32Src]);
;;;251    }
00001e  0a00              LSRS     r0,r0,#8
000020  e00b              B        |L9.58|
                  |L9.34|
000022  429c              CMP      r4,r3                 ;235
000024  d102              BNE      |L9.44|
000026  6940              LDR      r0,[r0,#0x14]         ;236
000028  0b00              LSRS     r0,r0,#12
00002a  e006              B        |L9.58|
                  |L9.44|
00002c  490f              LDR      r1,|L9.108|
00002e  6940              LDR      r0,[r0,#0x14]         ;240
000030  428c              CMP      r4,r1                 ;237
000032  d101              BNE      |L9.56|
000034  0c00              LSRS     r0,r0,#16
000036  e000              B        |L9.58|
                  |L9.56|
000038  0d00              LSRS     r0,r0,#20
                  |L9.58|
00003a  0741              LSLS     r1,r0,#29
00003c  0f49              LSRS     r1,r1,#29
00003e  2902              CMP      r1,#2                 ;242
000040  d004              BEQ      |L9.76|
000042  0088              LSLS     r0,r1,#2              ;250
000044  4669              MOV      r1,sp                 ;250
000046  5808              LDR      r0,[r1,r0]            ;250
                  |L9.72|
000048  b008              ADD      sp,sp,#0x20
00004a  bd10              POP      {r4,pc}
                  |L9.76|
00004c  4294              CMP      r4,r2                 ;244
00004e  d001              BEQ      |L9.84|
000050  429c              CMP      r4,r3                 ;244
000052  d102              BNE      |L9.90|
                  |L9.84|
000054  f7fffffe          BL       CLK_GetPCLK0Freq
000058  e7f6              B        |L9.72|
                  |L9.90|
00005a  f7fffffe          BL       CLK_GetPCLK1Freq
00005e  e7f3              B        |L9.72|
;;;252    
                          ENDP

                  |L9.96|
                          DCD      ||.constdata||
                  |L9.100|
                          DCD      0x40050000
                  |L9.104|
                          DCD      0x40000200
                  |L9.108|
                          DCD      0x40051000

                          AREA ||i.TIMER_Open||, CODE, READONLY, ALIGN=1

                  TIMER_Open PROC
;;;42       */
;;;43     uint32_t TIMER_Open(TIMER_T *timer, uint32_t u32Mode, uint32_t u32Freq)
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;44     {
000002  4617              MOV      r7,r2
000004  4606              MOV      r6,r0
;;;45         uint32_t u32Clk = TIMER_GetModuleClock(timer);
000006  f7fffffe          BL       TIMER_GetModuleClock
00000a  4605              MOV      r5,r0
;;;46         uint32_t u32Cmpr = 0, u32Prescale = 0;
00000c  2400              MOVS     r4,#0
;;;47     
;;;48         /* Fastest possible timer working freq is (u32Clk / 2). While cmpr = 2, pre-scale = 0. */
;;;49         if(u32Freq >= (u32Clk >> 1))
00000e  0840              LSRS     r0,r0,#1
000010  42b8              CMP      r0,r7
000012  d801              BHI      |L10.24|
;;;50         {
;;;51             u32Cmpr = 2;
000014  2002              MOVS     r0,#2
000016  e008              B        |L10.42|
                  |L10.24|
;;;52         }
;;;53         else
;;;54         {
;;;55             u32Cmpr = u32Clk / u32Freq;
000018  4639              MOV      r1,r7
00001a  4628              MOV      r0,r5
00001c  f7fffffe          BL       __aeabi_uidivmod
;;;56             u32Prescale = (u32Cmpr >> 24);  /* for 24 bits CMPDAT */
000020  0e04              LSRS     r4,r0,#24
;;;57             if (u32Prescale > 0)
000022  d002              BEQ      |L10.42|
;;;58                 u32Cmpr = u32Cmpr / (u32Prescale + 1);
000024  1c61              ADDS     r1,r4,#1
000026  f7fffffe          BL       __aeabi_uidivmod
                  |L10.42|
;;;59         }
;;;60     
;;;61         timer->CTL = u32Mode | u32Prescale;
00002a  9901              LDR      r1,[sp,#4]
00002c  4321              ORRS     r1,r1,r4
00002e  6031              STR      r1,[r6,#0]
;;;62         timer->CMP = u32Cmpr;
000030  6070              STR      r0,[r6,#4]
000032  1c64              ADDS     r4,r4,#1
;;;63     
;;;64         return(u32Clk / (u32Cmpr * (u32Prescale + 1)));
000034  4360              MULS     r0,r4,r0
000036  4601              MOV      r1,r0
000038  4628              MOV      r0,r5
00003a  f7fffffe          BL       __aeabi_uidivmod
;;;65     }
00003e  bdfe              POP      {r1-r7,pc}
;;;66     
                          ENDP


                          AREA ||i.TIMER_SetTriggerSource||, CODE, READONLY, ALIGN=1

                  TIMER_SetTriggerSource PROC
;;;303      */
;;;304    void TIMER_SetTriggerSource(TIMER_T *timer, uint32_t u32Src)
000000  6802              LDR      r2,[r0,#0]
;;;305    {
;;;306        timer->CTL = (timer->CTL & ~TIMER_CTL_TRGSSEL_Msk) | u32Src;
000002  2301              MOVS     r3,#1
000004  049b              LSLS     r3,r3,#18
000006  439a              BICS     r2,r2,r3
000008  430a              ORRS     r2,r2,r1
00000a  6002              STR      r2,[r0,#0]
;;;307    }
00000c  4770              BX       lr
;;;308    
                          ENDP


                          AREA ||i.TIMER_SetTriggerTarget||, CODE, READONLY, ALIGN=2

                  TIMER_SetTriggerTarget PROC
;;;319      */
;;;320    void TIMER_SetTriggerTarget(TIMER_T *timer, uint32_t u32Mask)
000000  6802              LDR      r2,[r0,#0]
;;;321    {
;;;322        timer->CTL = (timer->CTL & ~(TIMER_CTL_TRGPWM_Msk | TIMER_CTL_TRGADC_Msk | TIMER_CTL_TRGPDMA_Msk)) | (u32Mask);
000002  4b02              LDR      r3,|L12.12|
000004  401a              ANDS     r2,r2,r3
000006  430a              ORRS     r2,r2,r1
000008  6002              STR      r2,[r0,#0]
;;;323    }
00000a  4770              BX       lr
;;;324    
                          ENDP

                  |L12.12|
                          DCD      0xffd7feff

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                          DCD      0x01e84800
                          DCD      0x00008000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00009600
                          DCD      0x00000000
                          DCD      0x02dc6c00

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Library\\StdDriver\\src\\timer.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_timer_c_5bec749a____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___7_timer_c_5bec749a____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_timer_c_5bec749a____REVSH|
#line 402
|__asm___7_timer_c_5bec749a____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
